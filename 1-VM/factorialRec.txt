6 0 3
9 0 2  # read input and store it as the parameter
1 0 0  # allocate spot to receive return value from called function
5 0 24 # calling factorial
3 0 3  # prepare to multiply parameter and returned value from factorial
2 0 4  # multiply
9 0 1  # write output
9 0 3  # halt
6 0 3  # start of factorial function
3 1 3  # get parent's parameter
1 0 1 
2 0 3  # subtract 1 from parent's parameter to get our parameter
8 0 57 # base case: if parameter is 1, goto PRE_RETURN
6 0 1  # if not base case, restore top element of stack (JPC eats it)
1 0 0
5 0 24 # recursive call to factorial
3 0 3 
2 0 4  # multiply parameter with value returned from recursive call
7 0 60 # skip next line if it didn't enter the base case
6 0 1  # PRE_RETURN; restore top element of stack because JPC eats it
4 1 4  # send return value to parent
2 0 0  # return to parent
